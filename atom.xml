<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>savior</title>
  
  <subtitle>一叶障目，不见泰山</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.upstady.com/"/>
  <updated>2019-08-01T06:32:44.841Z</updated>
  <id>http://blog.upstady.com/</id>
  
  <author>
    <name>Savior Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yii2 阿里云 短信服务 aliyun_dysms [ 2.0 版本 ]</title>
    <link href="http://blog.upstady.com/2018/06/23/aliyun-dysms/"/>
    <id>http://blog.upstady.com/2018/06/23/aliyun-dysms/</id>
    <published>2018-06-22T20:53:14.000Z</published>
    <updated>2019-08-01T06:32:44.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aliyun-dysms"><a href="#aliyun-dysms" class="headerlink" title="aliyun-dysms"></a>aliyun-dysms</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require <span class="string">"saviorlv/yii2-dysms:dev-master"</span></div></pre></td></tr></table></figure><blockquote><p>or添加下列代码在composer.json文件中并执行composer update 操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"require"</span>: &#123;</div><div class="line">       <span class="string">"saviorlv/yii2-dysms"</span>:<span class="string">"dev-master"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h4 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h4><blockquote><p>在config/main.php配置文件中定义component配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'components'</span> =&gt; [</div><div class="line">  .....</div><div class="line">  <span class="string">'aliyun'</span> =&gt; [</div><div class="line">      <span class="string">'class'</span> =&gt; <span class="string">'saviorlv\aliyun\Sms'</span>,</div><div class="line">      <span class="string">'accessKeyId'</span> =&gt; <span class="string">'123455'</span>,</div><div class="line">      <span class="string">'accessKeySecret'</span> =&gt; <span class="string">'122345666'</span></div><div class="line">    ],</div><div class="line">  ....</div><div class="line">]</div></pre></td></tr></table></figure></p><p>代码中调用（调用短信发送接口示例）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$response</span> = Yii::<span class="variable">$app</span>-&gt;aliyun-&gt;sendSms(</div><div class="line">            <span class="string">"孙坤峰"</span>, // 短信签名</div><div class="line">            <span class="string">"SMS_76350132"</span>, // 短信模板编号</div><div class="line">            <span class="string">"13673715134"</span>, // 短信接收者</div><div class="line">            Array(  // 短信模板中字段的值</div><div class="line">                <span class="string">"code"</span>=&gt;<span class="string">"12345"</span>,</div><div class="line">                <span class="string">"product"</span>=&gt;<span class="string">"dsd"</span></div><div class="line">            ),</div><div class="line">            <span class="string">"123"</span></div><div class="line">        );</div><div class="line">        print_r(<span class="variable">$response</span>);</div></pre></td></tr></table></figure><p><a href="https://github.com/Mr-sunK/yii2-dysms" target="_blank" rel="external">Yii2专属 新的链接地址</a><br><a href="https://github.com/Mr-sunK/aliyun-dysms" target="_blank" rel="external">通用包 新的链接地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;aliyun-dysms&quot;&gt;&lt;a href=&quot;#aliyun-dysms&quot; class=&quot;headerlink&quot; title=&quot;aliyun-dysms&quot;&gt;&lt;/a&gt;aliyun-dysms&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;
      
    
    </summary>
    
      <category term="阿里云" scheme="http://blog.upstady.com/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="alyun" scheme="http://blog.upstady.com/tags/alyun/"/>
    
      <category term="sms" scheme="http://blog.upstady.com/tags/sms/"/>
    
  </entry>
  
  <entry>
    <title>yii2 阿里云 OSS服务 aliyun_oss [ 2.0 版本 ]</title>
    <link href="http://blog.upstady.com/2018/06/23/aliyun-oss/"/>
    <id>http://blog.upstady.com/2018/06/23/aliyun-oss/</id>
    <published>2018-06-22T20:39:24.000Z</published>
    <updated>2019-08-01T06:32:44.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Yii2-阿里云-OSS"><a href="#Yii2-阿里云-OSS" class="headerlink" title="Yii2 阿里云 OSS"></a>Yii2 阿里云 OSS</h3><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require mrk/yii2-aliyun-oss:@dev</div></pre></td></tr></table></figure><p>or add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;mrk/yii2-aliyun-oss&quot;:&quot;@dev&quot;</div></pre></td></tr></table></figure><p>使用</p><blockquote><p>在 main.php 文件中做如下修改</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">components =&gt; [</div><div class="line">    <span class="string">'oss'</span> =&gt; [</div><div class="line">        <span class="string">'class'</span> =&gt; <span class="string">'mrk\aliyun\OSS'</span>,</div><div class="line">        <span class="string">'accessKeyId'</span> =&gt; <span class="string">'xxxxx'</span>, <span class="comment">// 阿里云AccessKeyID</span></div><div class="line">        <span class="string">'accessKeySecret'</span> =&gt; <span class="string">'xxxx'</span>, <span class="comment">// 阿里云 AccessKeySecret</span></div><div class="line">        <span class="string">'bucket'</span> =&gt; <span class="string">'xxx'</span>, <span class="comment">// bucket</span></div><div class="line">        <span class="string">'endpoint'</span> =&gt; <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>, <span class="comment">//OSS节点地址</span></div><div class="line">    ],</div><div class="line">]</div></pre></td></tr></table></figure><blockquote><p>在 controller 中</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\Yii::$app-&gt;oss-&gt;upload($object,$file);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Yii2-阿里云-OSS&quot;&gt;&lt;a href=&quot;#Yii2-阿里云-OSS&quot; class=&quot;headerlink&quot; title=&quot;Yii2 阿里云 OSS&quot;&gt;&lt;/a&gt;Yii2 阿里云 OSS&lt;/h3&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Yii2" scheme="http://blog.upstady.com/categories/Yii2/"/>
    
    
      <category term="aliyun" scheme="http://blog.upstady.com/tags/aliyun/"/>
    
      <category term="yii2" scheme="http://blog.upstady.com/tags/yii2/"/>
    
      <category term="oss" scheme="http://blog.upstady.com/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 自带事件的用法</title>
    <link href="http://blog.upstady.com/2018/06/20/yii2-event/"/>
    <id>http://blog.upstady.com/2018/06/20/yii2-event/</id>
    <published>2018-06-20T07:52:12.000Z</published>
    <updated>2019-08-01T06:32:44.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a>Model 层</h3><blockquote><p>保存之前的事件示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">function</span> beforeSave(<span class="variable">$insert</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (parent::beforeSave(<span class="variable">$insert</span>)) &#123;</div><div class="line">        // 插入新数据判断订单号是否存在</div><div class="line">        <span class="keyword">if</span> (!Order::findModel([<span class="string">'trade_no'</span> =&gt; <span class="variable">$this</span>-&gt;order_trade_no])) &#123;</div><div class="line">            throw new Exception(<span class="string">"订单号不存在"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>保存之后的事件示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">function</span> afterSave(<span class="variable">$insert</span>, <span class="variable">$changedAttributes</span>)</div><div class="line">&#123;</div><div class="line">    parent::afterSave(<span class="variable">$insert</span>, <span class="variable">$changedAttributes</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$insert</span>) &#123;</div><div class="line">        // 插入新数据之后修改订单状态</div><div class="line">        Order::updateAll([<span class="string">'shipping_status'</span> =&gt; Order::SHIPPING_STATUS1, <span class="string">'shipping_at'</span> =&gt; time()], [<span class="string">'trade_no'</span> =&gt; <span class="variable">$this</span>-&gt;order_trade_no]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>删除之后的事件示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">function</span> <span class="function"><span class="title">afterDelete</span></span>()</div><div class="line">&#123;</div><div class="line">    parent::afterDelete();</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Model 事件怎么保证数据事务呢？<br>添加一下代码在 Model 中:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">function</span> <span class="function"><span class="title">transactions</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">return</span> [</div><div class="line">        self::SCENARIO_DEFAULT =&gt; self::OP_INSERT | self::OP_UPDATE | self::OP_DELETE</div><div class="line">        // self::SCENARIO_DEFAULT =&gt; self::OP_INSERT</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Controller-层-事件"><a href="#Controller-层-事件" class="headerlink" title="Controller 层 事件"></a>Controller 层 事件</h3><blockquote><p>每次请求之前操作示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param \yii\base\Action <span class="variable">$action</span></div><div class="line"> * @<span class="built_in">return</span> bool</div><div class="line"> * @throws \yii\web\BadRequestHttpException</div><div class="line"> */</div><div class="line">public <span class="keyword">function</span> beforeAction(<span class="variable">$action</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (parent::beforeAction(<span class="variable">$action</span>)) &#123;</div><div class="line">        <span class="variable">$this</span>-&gt;request = Yii::<span class="variable">$app</span>-&gt;request;</div><div class="line">        Yii::info(<span class="variable">$this</span>-&gt;request-&gt;absoluteUrl, <span class="string">'请求地址'</span>);</div><div class="line">        Yii::info(<span class="variable">$this</span>-&gt;request-&gt;rawBody, <span class="string">'请求数据'</span>);</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>每次请求之后操作示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param \yii\base\Action <span class="variable">$action</span></div><div class="line"> * @param mixed <span class="variable">$result</span></div><div class="line"> * @<span class="built_in">return</span> array|mixed</div><div class="line"> * @throws BusinessException</div><div class="line"> */</div><div class="line">public <span class="keyword">function</span> afterAction(<span class="variable">$action</span>, <span class="variable">$result</span>)</div><div class="line">&#123;</div><div class="line">    Yii::info(\yii\helpers\Json::encode(<span class="variable">$result</span>), <span class="string">'请求返回结果'</span>);</div><div class="line">    <span class="built_in">return</span> <span class="variable">$result</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Model-层&quot;&gt;&lt;a href=&quot;#Model-层&quot; class=&quot;headerlink&quot; title=&quot;Model 层&quot;&gt;&lt;/a&gt;Model 层&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;保存之前的事件示例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; beforeSave(&lt;span class=&quot;variable&quot;&gt;$insert&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (parent::beforeSave(&lt;span class=&quot;variable&quot;&gt;$insert&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 插入新数据判断订单号是否存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Order::findModel([&lt;span class=&quot;string&quot;&gt;&#39;trade_no&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;order_trade_no])) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            throw new Exception(&lt;span class=&quot;string&quot;&gt;&quot;订单号不存在&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://blog.upstady.com/categories/Yii2/"/>
    
    
      <category term="yii2" scheme="http://blog.upstady.com/tags/yii2/"/>
    
      <category term="event" scheme="http://blog.upstady.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署hexo-blog</title>
    <link href="http://blog.upstady.com/2017/11/17/hexo-blog/"/>
    <id>http://blog.upstady.com/2017/11/17/hexo-blog/</id>
    <published>2017-11-17T08:07:52.000Z</published>
    <updated>2019-08-01T06:32:44.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步：-安装node-js以及本地Hexo初始化"><a href="#第一步：-安装node-js以及本地Hexo初始化" class="headerlink" title="第一步： 安装node.js以及本地Hexo初始化"></a>第一步： 安装node.js以及本地Hexo初始化</h4><h5 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h5><blockquote><p>安装node.js<br>windows nodejs 官网下载安装<a href="http://nodejs.cn/" target="_blank" rel="external">地址</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node  <span class="comment">#mac</span></div></pre></td></tr></table></figure><blockquote><p>初始化Hexo博客,首先创建 你的Hexo 目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir hexo-blog //创建一个自定义的hexo目录</div><div class="line">$ <span class="built_in">cd</span> hexo-blog //进入到刚刚创建的目录</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>然后安装 hexo-cli，安装hexo-cli 如果是Linux系统 需要 root 权限，使用 sudo 运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli   //linux</div><div class="line">npm install -g hexo-cli   //win</div></pre></td></tr></table></figure><blockquote><p>初始化该文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><blockquote><p>安装hexo的扩展插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><blockquote><p>等执行成功以后安装两个插件， hexo-deployer-git 和 hexo-server ,这俩插件的作用分别是使用Git自动部署，和本地简单的服务器。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git--save</div><div class="line">npm install hexo-server--save</div></pre></td></tr></table></figure><blockquote><p>以及一些其他插件（*非必选）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install hexo-admin--save</div><div class="line">npm install hexo-generator-archive--save</div><div class="line">npm install hexo-generator-feed--save</div><div class="line">npm install hexo-generator-search--save</div><div class="line">npm install hexo-generator-tag--save</div><div class="line">npm install hexo-generator-sitemap--save</div></pre></td></tr></table></figure><blockquote><p>到这里hexo的本地搭建已经基本结束了，快来新建一个文章并在本地启动吧~</p><p>使用 hexo new &lt;文章名称&gt; 来新建文章，该命令会成成一个 .md文件放置在 sources/_posts文件夹。（*在hexo目录下执行命令）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"hello Hexo"</span></div></pre></td></tr></table></figure><blockquote><p>执行该命令后在hexo目录下的 sources/_posts文件夹里生成了刚刚创建的hello</p><p>编辑完毕以后， 使用hexo g将 .md文件渲染成静态文件，然后启动hexo-server</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo ghexo server</div></pre></td></tr></table></figure><blockquote><p>打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 如果看到 hexo 的初始页面证明安装成功。</p><p>生成ssh公钥密钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh$ ssh-keygen</div></pre></td></tr></table></figure><blockquote><p>它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空；具体生产方法可以<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">参考这里</a></p></blockquote><h4 id="第二步：-服务器环境搭建，包括安装-Git-、Nginx配置-、创建-git-用户"><a href="#第二步：-服务器环境搭建，包括安装-Git-、Nginx配置-、创建-git-用户" class="headerlink" title="第二步： 服务器环境搭建，包括安装 Git 、Nginx配置 、创建 git 用户"></a>第二步： 服务器环境搭建，包括安装 Git 、Nginx配置 、创建 git 用户</h4><h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><blockquote><p>因为我们是拿nginx做 Web 服务器，所以我们需要安装部署好nginx，如果没有安装，推荐使用<a href="https://lnmp.org/install.html" target="_blank" rel="external">LNMP一键安装包</a></p><p>我们可以专门为hexo创建一个部署目录，比如我创建了/home/www/hexo文件夹，并把nginx的配置文件nginx.conf中的部署目录改为/home/www/hexo，配置文件一般在/usr/local/nginx/conf里；同样可以使用默认目录，nginx的默认目录为/var/www/html，如果使用LNMP一键安装包，则默认的部署目录为/home/wwwroot/default</p></blockquote><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install git</div></pre></td></tr></table></figure><p>1,创建一个git用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo adduser git</div><div class="line">$ passwd git</div></pre></td></tr></table></figure><blockquote><p>虽说现在的仓库只有我们自己在使用，新建一个 git 用户显得不是很有必要，但是为了安全起见，还是建议使用单独的 git 用户来专门运行</p></blockquote><p>2,git 服务,添加证书登录</p><blockquote><p>把刚在在本地创建或者已经拥有的公钥，也就是 ~/.ssh/id_rsa.pub 文件里的内容添加到服务器的 /home/git/.ssh/authorized_keys 文件中，如上所说，添加公钥之后可以防止每次 push 都输入密码。（*可以直接执行cat ~/.ssh/id_rsa.pub | pbcopy 复制）</p></blockquote><p>3,初始化 Git 仓库</p><blockquote><p>可以将git仓库放到自定义位置，我是将其放在 /var/repo/blog.git 目录下的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir /var/repo</div><div class="line">$ <span class="built_in">cd</span> /var/repo</div><div class="line">$ sudo git init --bare blog.git</div></pre></td></tr></table></figure><blockquote><p>使用 –bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。</p></blockquote><p>4, 配置 git hooks</p><blockquote><p>我们这里要使用的是 post-receive 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行，关于 hooks的详情内容可以<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">参考这里</a>。</p><p>在 blog.git/hooks 目录下新建一个 post-receive 文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /var/repo/blog.git/hooks</div><div class="line">$ vim post-receive</div></pre></td></tr></table></figure><blockquote><p>在 post-receive 文件中写入如下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git --work-tree=/home/www/hexo --git-dir=/var/repo/blog.git checkout -f</div></pre></td></tr></table></figure><blockquote><p>注意，/home/www/hexo 要换成你自己的部署目录，正如上文所说，我是的配置目录是/home/www/hexo。/var/repo/blog.git是git仓库的位置。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p><p>设置这个文件的可执行权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure><blockquote><p>改变 blog.git 目录的拥有者为 git 用户</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R git:git blog.git</div></pre></td></tr></table></figure><blockquote><p>禁用 git 用户的 shell 登录权限出于安全考虑，我们要让 git 用户不能通过 shell 登录。可以编辑 /etc/passwd 来实现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/passwd</div></pre></td></tr></table></figure><p>将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</div></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</div></pre></td></tr></table></figure><blockquote><p>这样 git 用户可以通过 ssh 正常使用 git，但是无法登录 sehll。</p></blockquote><h4 id="第三步：-使用Git自动化部署发布博客"><a href="#第三步：-使用Git自动化部署发布博客" class="headerlink" title="第三步： 使用Git自动化部署发布博客"></a>第三步： 使用Git自动化部署发布博客</h4><p>1, 配置本地_config.yml文件,完成自动化部署</p><p>现在配置 hexo 的 deploy。</p><p>修改 hexo 目录下的 _config.yml 找到 deploy, 修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line"><span class="built_in">type</span>: git </div><div class="line">repo:git@ip:/var/repo/blog.git </div><div class="line">branch:master</div></pre></td></tr></table></figure><blockquote><p>repo 的地址为你自己的地址以及 git 仓库目录至此，我们的 hexo 自动部署已经全部配置好了</p></blockquote><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>新建文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post <span class="string">"name"</span></div></pre></td></tr></table></figure><p>生成 &amp; 部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一步：-安装node-js以及本地Hexo初始化&quot;&gt;&lt;a href=&quot;#第一步：-安装node-js以及本地Hexo初始化&quot; class=&quot;headerlink&quot; title=&quot;第一步： 安装node.js以及本地Hexo初始化&quot;&gt;&lt;/a&gt;第一步： 安装node.js以及本地Hexo初始化&lt;/h4&gt;&lt;h5 id=&quot;本地环境&quot;&gt;&lt;a href=&quot;#本地环境&quot; class=&quot;headerlink&quot; title=&quot;本地环境&quot;&gt;&lt;/a&gt;本地环境&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;安装node.js&lt;br&gt;windows nodejs 官网下载安装&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brew install node  &lt;span class=&quot;comment&quot;&gt;#mac&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;初始化Hexo博客,首先创建 你的Hexo 目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ mkdir hexo-blog //创建一个自定义的hexo目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo-blog //进入到刚刚创建的目录&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.upstady.com/categories/Hexo/"/>
    
    
      <category term="nginx" scheme="http://blog.upstady.com/tags/nginx/"/>
    
      <category term="linux" scheme="http://blog.upstady.com/tags/linux/"/>
    
      <category term="hexo" scheme="http://blog.upstady.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>server-send-file</title>
    <link href="http://blog.upstady.com/2017/10/31/server-send-file/"/>
    <id>http://blog.upstady.com/2017/10/31/server-send-file/</id>
    <published>2017-10-31T06:13:19.000Z</published>
    <updated>2019-08-01T06:32:44.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。</p></blockquote><a id="more"></a><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rsync [OPTION]... SRC DESTrsync</div><div class="line">[OPTION]... SRC [USER@]host:DESTrsync</div><div class="line">[OPTION]... [USER@]HOST:SRC DESTrsync</div><div class="line">[OPTION]... [USER@]HOST::SRC DESTrsync</div><div class="line">[OPTION]... SRC [USER@]HOST::DESTrsync</div><div class="line">[OPTION]...rsync://[USER@]HOST[:PORT]/SRC [DEST]</div></pre></td></tr></table></figure><h4 id="对应于以上六种命令格式，rsync有六种不同的工作模式："><a href="#对应于以上六种命令格式，rsync有六种不同的工作模式：" class="headerlink" title="对应于以上六种命令格式，rsync有六种不同的工作模式："></a>对应于以上六种命令格式，rsync有六种不同的工作模式：</h4><blockquote><ol><li><p>拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号”:”分隔符时就启动这种工作模式。如：rsync -a /data /backup</p></li><li><p>使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号”:”分隔符时启动该模式。如：rsync -avz *.c foo:src</p></li><li><p>使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号”:”分隔符时启动该模式。如：rsync -avz foo:src/bar /data</p></li><li><p>从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含”::”分隔符时启动该模式。如：rsync -av root@192.168.78.192::www /databack</p></li><li><p>从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含”::”分隔符时启动该模式。如：rsync -av /databack root@192.168.78.192::www</p></li><li><p>列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：rsync -v rsync://192.168.78.192/www</p></li></ol></blockquote><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">-v, --verbose 详细模式输出。</div><div class="line">-q, --quiet 精简输出模式。</div><div class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验。</div><div class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</div><div class="line">-r, --recursive 对子目录以递归模式处理。</div><div class="line">-R, --relative 使用相对路径信息。</div><div class="line">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</div><div class="line">--backup-dir 将备份文件(如~filename)存放在在目录下。</div><div class="line">-suffix=SUFFIX 定义备份文件前缀。</div><div class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</div><div class="line">-l, --links 保留软链结。</div><div class="line">-L, --copy-links 想对待常规文件一样处理软链结。</div><div class="line">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。</div><div class="line">--safe-links 忽略指向SRC路径目录树以外的链结。</div><div class="line">-H, --hard-links 保留硬链结。</div><div class="line">-p, --perms 保持文件权限。</div><div class="line">-o, --owner 保持文件属主信息。</div><div class="line">-g, --group 保持文件属组信息。</div><div class="line">-D, --devices 保持设备文件信息。</div><div class="line">-t, --<span class="built_in">times</span> 保持文件时间信息。</div><div class="line">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间。</div><div class="line">-n, --dry-run现实哪些文件将被传输。</div><div class="line">-w, --whole-file 拷贝文件，不进行增量检测。</div><div class="line">-x, --one-file-system 不要跨越文件系统边界。</div><div class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节。</div><div class="line">-e, --rsh=<span class="built_in">command</span> 指定使用rsh、ssh方式进行数据同步。</div><div class="line">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息。</div><div class="line">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。</div><div class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。</div><div class="line">--delete 删除那些DST中SRC没有的文件。</div><div class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件。</div><div class="line">--delete-after 传输结束以后再删除。</div><div class="line">--ignore-errors 及时出现IO错误也进行删除。</div><div class="line">--max-delete=NUM 最多删除NUM个文件。</div><div class="line">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。</div><div class="line">--force 强制删除目录，即使不为空。</div><div class="line">--numeric-ids 不将数字的用户和组id匹配为用户名和组名。</div><div class="line">--timeout=timeip超时时间，单位为秒。</div><div class="line">-I, --ignore-times 不跳过那些有同样的时间和长度的文件。</div><div class="line">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。</div><div class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。</div><div class="line">-T --temp-dir=DIR 在DIR中创建临时文件。</div><div class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份。</div><div class="line">-P 等同于 --partial。--progress 显示备份过程。</div><div class="line">-z, --compress 对备份的文件在传输时进行压缩处理。</div><div class="line">--exclude=PATTERN 指定排除不需要传输的文件模式。</div><div class="line">--include=PATTERN 指定不排除而需要传输的文件模式。</div><div class="line">--exclude-from=FILE 排除FILE中指定模式的文件。</div><div class="line">--include-from=FILE 不排除FILE指定模式匹配的文件。</div><div class="line">--version 打印版本信息。--address 绑定到特定的地址。</div><div class="line">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。</div><div class="line">--port=PORT 指定其他的rsync服务端口。</div><div class="line">--blocking-io 对远程shell使用阻塞IO。</div><div class="line">-stats 给出某些文件的传输状态。</div><div class="line">--progress 在传输时现实传输过程。</div><div class="line">--<span class="built_in">log</span>-format=formAT 指定日志文件格式。</div><div class="line">--password-file=FILE 从FILE中得到密码。</div><div class="line">--bwlimit=KBPS 限制I/O带宽，KBytes per second。</div><div class="line">-h, --<span class="built_in">help</span> 显示帮助信息。</div></pre></td></tr></table></figure><h3 id="实例SSH方式"><a href="#实例SSH方式" class="headerlink" title="实例SSH方式"></a>实例SSH方式</h3><p>首先在服务端启动ssh服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">servicesshd start启动 sshd： [确定]</div></pre></td></tr></table></figure><blockquote><p>使用rsync进行同步</p><p>接下来就可以在客户端使用rsync命令来备份服务端上的数据了，SSH方式是通过系统用户来进行备份的，如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -vzrtopg --progress -e ssh --delete work@172.16.78.192:/www/* /databack/experiment/rsyncwork@172.16.78.192<span class="string">'s password:receiving file list ...5 files to considertest/a0 100% 0.00kB/s 527:35:41 (1, 20.0% of 5)b67 100% 65.43kB/s 0:00:00 (2, 40.0% of 5)c0 100% 0.00kB/s 527:35:41 (3, 60.0% of 5)dd100663296 100% 42.22MB/s 0:00:02 (4, 80.0% of 5)sent 96 bytes received 98190 bytes 11563.06 bytes/sectotal size is 100663363 speedup is 1024.19</span></div></pre></td></tr></table></figure><p>上面的信息描述了整个的备份过程，以及总共备份数据的大小。</p><h3 id="后台服务方式"><a href="#后台服务方式" class="headerlink" title="后台服务方式"></a>后台服务方式</h3><blockquote><p>启动rsync服务，编辑/etc/xinetd.d/rsync文件，将其中的disable=yes改为disable=no，并重启xinetd服务，如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/xinetd.d/rsync<span class="comment">#default: off# description: The rsync server is a good addition to an ftp server, as it \# allows crc checksumming etc.service rsync &#123;disable = nosocket_type = streamwait = nouser = rootserver = /usr/bin/rsyncserver_args = --daemonlog_on_failure += USERID&#125;</span></div><div class="line"></div><div class="line">/etc/init.d/xinetd restart停止 xinetd： [确定]启动 xinetd： [确定]</div></pre></td></tr></table></figure><blockquote><p>创建配置文件，默认安装好rsync程序后，并不会自动创建rsync的主配置文件，需要手工来创建，其主配置文件为“/etc/rsyncd.conf”，创建该文件并插入如下内容：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rsyncd.confuid=rootgid=rootmax connections=4log file=/var/<span class="built_in">log</span>/rsyncd.logpid file=/var/run/rsyncd.pidlock file=/var/run/rsyncd.locksecrets file=/etc/rsyncd.passwdhosts deny=172.16.78.0/22[www]comment= backup webpath=/wwwread only = noexclude=testauth users=work</div></pre></td></tr></table></figure><blockquote><p>创建密码文件，采用这种方式不能使用系统用户对客户端进行认证，所以需要创建一个密码文件，其格式为“username:password”，用户名可以和密码可以随便定义，最好不要和系统帐户一致，同时要把创建的密码文件权限设置为600，这在前面的模块参数做了详细介绍。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"work:abc123"</span> &gt; /etc/rsyncd.passwdchmod 600 /etc/rsyncd.passwd</div></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><blockquote><p>完成以上工作，现在就可以对数据进行备份了，如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avz --progress --delete work@172.16.78.192::www /databack/experiment/rsyncPassword:receiving file list ...6 files to consider./ files...a0 100% 0.00kB/s 528:20:41 (1, 50.0% of 6)b67 100% 65.43kB/s 0:00:00 (2, 66.7% of 6)c0 100% 0.00kB/s 528:20:41 (3, 83.3% of 6)dd100663296 100% 37.49MB/s 0:00:02 (4, 100.0% of 6)sent 172 bytes received 98276 bytes 17899.64 bytes/sectotal size is 150995011 speedup is 1533.75</div></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><blockquote><p>当服务器的数据出现问题时，那么这时就需要通过客户端的数据对服务端进行恢复，但前提是服务端允许客户端有写入权限，否则也不能在客户端直接对服务端进行恢复，使用rsync对数据进行恢复的方法如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avz --progress /databack/experiment/rsync/ work@172.16.78.192::wwwPassword:building file list ...6 files to consider./ab67 100% 0.00kB/s 0:00:00 (2, 66.7% of 6)csent 258 bytes received 76 bytes 95.43 bytes/sectotal size is 150995011 speedup is 452080.87</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.upstady.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://blog.upstady.com/tags/linux/"/>
    
      <category term="rsync" scheme="http://blog.upstady.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>centos7 忘记MySQL密码解决办法</title>
    <link href="http://blog.upstady.com/2017/09/09/centos-forget-mysql-password/"/>
    <id>http://blog.upstady.com/2017/09/09/centos-forget-mysql-password/</id>
    <published>2017-09-09T03:31:56.000Z</published>
    <updated>2019-08-01T06:32:44.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭。</p></blockquote><a id="more"></a><h3 id="修改MySQL的登录设置："><a href="#修改MySQL的登录设置：" class="headerlink" title="修改MySQL的登录设置："></a>修改MySQL的登录设置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/my.cnf</span></div></pre></td></tr></table></figure><blockquote><p>在[mysqld]的段中加上一句：<code>skip-grant-tables</code>,如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">datadir=/var/lib/mysql</div><div class="line">socket=/var/lib/mysql/mysql.sock</div><div class="line">skip-grant-tables</div></pre></td></tr></table></figure><blockquote><p>保存并且退出vi。</p></blockquote><h3 id="重新启动mysqld"><a href="#重新启动mysqld" class="headerlink" title="重新启动mysqld"></a>重新启动mysqld</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># systemctl restart  mysqld.service</span></div></pre></td></tr></table></figure><h3 id="登录并修改MySQL的root密码"><a href="#登录并修改MySQL的root密码" class="headerlink" title="登录并修改MySQL的root密码"></a>登录并修改MySQL的root密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql</span></div><div class="line">Welcome to the MySQL monitor. Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3 to server version: 3.23.56</div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the buffer.</div><div class="line">mysql&gt; USE mysql ;</div><div class="line">Database changed</div><div class="line">mysql&gt; UPDATE user SET Password = password ( <span class="string">'password'</span> ) WHERE User = <span class="string">'root'</span> ;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">Rows matched: 2 Changed: 0 Warnings: 0</div><div class="line">mysql&gt; flush privileges ;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div><div class="line">mysql&gt; quit</div></pre></td></tr></table></figure><h3 id="将MySQL的登录设置修改回来"><a href="#将MySQL的登录设置修改回来" class="headerlink" title="将MySQL的登录设置修改回来"></a>将MySQL的登录设置修改回来</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/my.cnf</span></div></pre></td></tr></table></figure><blockquote><p>将刚才在[mysqld]的段中加上的skip-grant-tables删除,保存并且退出<code>vim</code>.</p></blockquote><h3 id="重新启动mysqld-1"><a href="#重新启动mysqld-1" class="headerlink" title="重新启动mysqld"></a>重新启动mysqld</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># systemctl restart  mysqld.service</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.upstady.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="http://blog.upstady.com/tags/centos/"/>
    
      <category term="mysql" scheme="http://blog.upstady.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>yii2-ActiveRecord</title>
    <link href="http://blog.upstady.com/2017/08/29/yii2-ActiveRecord/"/>
    <id>http://blog.upstady.com/2017/08/29/yii2-ActiveRecord/</id>
    <published>2017-08-29T09:07:29.000Z</published>
    <updated>2019-08-01T06:32:44.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Yii 在操作数据库方面提供了一个十分强大的类库来支撑整个框架业务的运转，这就是 Active Record （活动记录，以下简称AR）。</p></blockquote><a id="more"></a><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>AR类提供了一个面向对象的接口， 用以访问数据库中的数据。例如，假定 Customer AR 类关联着 customer 表，且该类的 name 属性代表 customer 表的 name 列。 你可以写以下代码来哉customer 表里插入一行新的记录:</p><p>用 AR 而不是原生的 SQL 语句去执行数据库查询，可以调用直观方法来实现相同目标。如，调用 yiidbActiveRecord::save() 方法将执行插入或更新轮询，将在该 AR 类关联的数据表新建或更新一行数据：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$customer = <span class="keyword">new</span> Customer();</div><div class="line">$customer-&gt;name = <span class="string">'Qiang'</span>;</div><div class="line">$customer-&gt;save();  <span class="comment">// 一行新数据插入 customer 表</span></div></pre></td></tr></table></figure><blockquote><p>上面的代码和使用下面的原生 SQL 语句是等效的，但显然前者更直观， 更不易出错，并且面对不同的数据库系统（DBMS, Database Management System）时更不容易产生兼容性问题。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$db-&gt;createCommand(<span class="string">'INSERT INTO customer (name) VALUES (:name)'</span>, [</div><div class="line">    <span class="string">':name'</span> =&gt; <span class="string">'Qiang'</span>,</div><div class="line">])-&gt;execute();</div></pre></td></tr></table></figure><blockquote><p>下面是所有目前被 Yii 的 AR 功能所支持的数据库列表：<br>MySQL 4.1 及以上：通过 yiidbActiveRecord<br>PostgreSQL 7.3 及以上：通过 yiidbActiveRecord<br>SQLite 2 和 3：通过 yiidbActiveRecord<br>Microsoft SQL Server 2010 及以上：通过 yiidbActiveRecord<br>Oracle: 通过 yiidbActiveRecord<br>CUBRID 9.1 及以上：通过 yiidbActiveRecord<br>Sphinx：通过 yiisphinxActiveRecord，需求 yii2-sphinx 扩展<br>ElasticSearch：通过 yiielasticsearchActiveRecord，需求 yii2-elasticsearch 扩展<br>Redis 2.6.12 及以上：通过 yiiredisActiveRecord，需求 yii2-redis 扩展<br>MongoDB 1.3.0 及以上：通过 yiimongodbActiveRecord，需求 yii2-mongodb 扩展<br>如你所见，Yii 不仅提供了对关系型数据库的 AR 支持，还提供了 NoSQL 数据库的支持。</p></blockquote><h3 id="声明-AR-类"><a href="#声明-AR-类" class="headerlink" title="声明 AR 类"></a>声明 AR 类</h3><blockquote><p>要想声明一个 AR 类，你需要扩展 yiidbActiveRecord 基类， 并实现 tableName 方法，返回与之相关联的的数据表的名称：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> string 返回该AR类关联的数据表名</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'customer'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="访问列数据"><a href="#访问列数据" class="headerlink" title="访问列数据"></a>访问列数据</h3><blockquote><p>AR 把相应数据行的每一个字段映射为 AR 对象的一个个特性变量（Attribute） 一个特性就好像一个普通对象的公共属性一样（public property）。特性变量的名称和对应字段的名称是一样的，且大小姓名。</p><p>使用以下语法读取列的值：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "id" 和 "mail" 是 $customer 对象所关联的数据表的对应字段名</span></div><div class="line">$id = $customer-&gt;id;</div><div class="line">$email = $customer-&gt;email;</div><div class="line">要改变列值，只要给关联属性赋新值并保存对象即可：</div><div class="line"></div><div class="line">$customer-&gt;email = <span class="string">'james@example.com'</span>;</div><div class="line">$customer-&gt;save();</div></pre></td></tr></table></figure><h3 id="建立数据库连接"><a href="#建立数据库连接" class="headerlink" title="建立数据库连接"></a>建立数据库连接</h3><blockquote><p>AR 用一个 yiidbConnection 对象与数据库交换数据。默认的，它使用 db 组件作为其连接对象，你可以在应用程序配置文件中设置下 db 组件，就像这样：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [ </div><div class="line">    <span class="string">'components'</span> =&gt; [ </div><div class="line">        <span class="string">'db'</span> =&gt; [ </div><div class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>, </div><div class="line">            <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=localhost;dbname=testdb'</span>, </div><div class="line">            <span class="string">'username'</span> =&gt; <span class="string">'demo'</span>, </div><div class="line">            <span class="string">'password'</span> =&gt; <span class="string">'demo'</span>, </div><div class="line">        ],</div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure><blockquote><p>如果在你的应用中应用了不止一个数据库，且你需要给你的 AR 类使用不同的数据库链接（DB connection） ，你可以覆盖掉 yiidbActiveRecord::getDb() 方法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDb</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> \Yii::$app-&gt;db2;  <span class="comment">// 使用名为 "db2" 的应用组件</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><blockquote><p>AR 提供了两种方法来构建 DB 查询并向 AR 实例里填充数据：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yiidbActiveRecord::find()</div><div class="line">yiidbActiveRecord::findBySql()</div></pre></td></tr></table></figure><blockquote><p>以上两个方法都会返回 yiidbActiveQuery 实例，该类继承自yiidbQuery， 因此，他们都支持同一套灵活且强大的 DB 查询方法，如where()，join()，orderBy()，等等。</p><p>下面的这些案例展示了一些可能的玩法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取回所有活跃客户(状态为 *active* 的客户）并以他们的 ID 排序：</span></div><div class="line">$customers = Customer::find()</div><div class="line">    -&gt;where([<span class="string">'status'</span> =&gt; Customer::STATUS_ACTIVE])</div><div class="line">    -&gt;orderBy(<span class="string">'id'</span>)</div><div class="line">    -&gt;all();</div><div class="line"></div><div class="line"><span class="comment">// 返回ID为1的客户：</span></div><div class="line">$customer = Customer::find()</div><div class="line">    -&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])</div><div class="line">    -&gt;one();</div><div class="line"></div><div class="line"><span class="comment">// 取回活跃客户的数量：</span></div><div class="line">$count = Customer::find()</div><div class="line">    -&gt;where([<span class="string">'status'</span> =&gt; Customer::STATUS_ACTIVE])</div><div class="line">    -&gt;count();</div><div class="line"></div><div class="line"><span class="comment">// 以客户ID索引结果集：</span></div><div class="line"><span class="comment">// $customers 数组以 ID 为索引</span></div><div class="line">$customers = Customer::find()-&gt;indexBy(<span class="string">'id'</span>)-&gt;all();</div><div class="line"></div><div class="line"><span class="comment">// 用原生 SQL 语句检索客户：</span></div><div class="line">$sql = <span class="string">'SELECT * FROM customer'</span>;</div><div class="line">$customers = Customer::findBySql($sql)-&gt;all();</div></pre></td></tr></table></figure><blockquote><p>小技巧：在上面的代码中，Customer::STATUS_ACTIVE 是一个在 Customer 类里定义的常量。（译注：这种常量的值一般都是tinyint）相较于直接在代码中写死字符串或数字，使用一个更有意义的常量名称是一种更好的编程习惯。</p><p>有两个快捷方法：findOne 和 findAll() 用来返回一个或者一组ActiveRecord实例。前者返回第一个匹配到的实例，后者返回所有。 例如：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回 id 为 1 的客户</span></div><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 返回 id 为 1 且状态为 *active* 的客户</span></div><div class="line">$customer = Customer::findOne([</div><div class="line">    <span class="string">'id'</span> =&gt; <span class="number">1</span>,</div><div class="line">    <span class="string">'status'</span> =&gt; Customer::STATUS_ACTIVE,</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">// 返回id为1、2、3的一组客户</span></div><div class="line">$customers = Customer::findAll([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 返回所有状态为 "deleted" 的客户</span></div><div class="line">$customer = Customer::findAll([</div><div class="line">    <span class="string">'status'</span> =&gt; Customer::STATUS_DELETED,</div><div class="line">]);</div></pre></td></tr></table></figure><h4 id="以数组形式获取数据"><a href="#以数组形式获取数据" class="headerlink" title="以数组形式获取数据"></a>以数组形式获取数据</h4><blockquote><p>有时候，我们需要处理很大量的数据，这时可能需要用一个数组来存储取到的数据， 从而节省内存。</p><p>你可以用 asArray() 函数做到这一点：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以数组而不是对象形式取回客户信息：</span></div><div class="line">$customers = Customer::find()</div><div class="line">    -&gt;asArray()</div><div class="line">    -&gt;all();</div><div class="line"><span class="comment">// $customers 的每个元素都是键值对数组</span></div></pre></td></tr></table></figure><h4 id="批量获取数据"><a href="#批量获取数据" class="headerlink" title="批量获取数据"></a>批量获取数据</h4><blockquote><p>在 Query Builder（查询构造器） 里，我们已经解释了当需要从数据库中查询大量数据时，你可以用 batch query（批量查询）来限制内存的占用。</p><p>你可能也想在 AR 里使用相同的技巧，比如这样……</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一次提取 10 个客户信息</span></div><div class="line"><span class="keyword">foreach</span> (Customer::find()-&gt;batch(<span class="number">10</span>) <span class="keyword">as</span> $customers) &#123;</div><div class="line">    <span class="comment">// $customers 是 10 个或更少的客户对象的数组</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 一次提取 10 个客户并一个一个地遍历处理</span></div><div class="line"><span class="keyword">foreach</span> (Customer::find()-&gt;each(<span class="number">10</span>) <span class="keyword">as</span> $customer) &#123;</div><div class="line">    <span class="comment">// $customer 是一个 ”Customer“ 对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 贪婪加载模式的批处理查询</span></div><div class="line"><span class="keyword">foreach</span> (Customer::find()-&gt;with(<span class="string">'orders'</span>)-&gt;each() <span class="keyword">as</span> $customer) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="操作数据-CURD"><a href="#操作数据-CURD" class="headerlink" title="操作数据(CURD)"></a>操作数据(CURD)</h4><blockquote><p>AR 提供以下方法插入、更新和删除与 AR 对象关联的那张表中的某一行：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yiidbActiveRecord::save()</div><div class="line">yiidbActiveRecord::insert()</div><div class="line">yiidbActiveRecord::update()</div><div class="line">yiidbActiveRecord::delete()</div></pre></td></tr></table></figure><blockquote><p>AR 同时提供了一些静态方法，可以应用在与某 AR 类所关联的整张表上。用这些方法的时候千万要小心，因为他们作用于整张表！比如，deleteAll() 会删除掉表里所有的记录。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yiidbActiveRecord::updateCounters()</div><div class="line">yiidbActiveRecord::updateAll()</div><div class="line">yiidbActiveRecord::updateAllCounters()</div><div class="line">yiidbActiveRecord::deleteAll()</div></pre></td></tr></table></figure><blockquote><p>下面的这些例子里，详细展现了如何使用这些方法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 插入新客户的记录</span></div><div class="line">$customer = <span class="keyword">new</span> Customer();</div><div class="line">$customer-&gt;name = <span class="string">'James'</span>;</div><div class="line">$customer-&gt;email = <span class="string">'james@example.com'</span>;</div><div class="line">$customer-&gt;save();  <span class="comment">// 等同于 $customer-&gt;insert();</span></div><div class="line"></div><div class="line"><span class="comment">// 更新现有客户记录</span></div><div class="line">$customer = Customer::findOne($id);</div><div class="line">$customer-&gt;email = <span class="string">'james@example.com'</span>;</div><div class="line">$customer-&gt;save();  <span class="comment">// 等同于 $customer-&gt;update();</span></div><div class="line"></div><div class="line"><span class="comment">// 删除已有客户记录</span></div><div class="line">$customer = Customer::findOne($id);</div><div class="line">$customer-&gt;delete();</div><div class="line"></div><div class="line"><span class="comment">// 删除多个年龄大于20，性别为男（Male）的客户记录</span></div><div class="line">Customer::deleteAll(</div><div class="line">    <span class="string">'age &gt; :age AND gender = :gender'</span>, </div><div class="line">    [<span class="string">':age'</span> =&gt; <span class="number">20</span>, <span class="string">':gender'</span> =&gt; <span class="string">'M'</span>]</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 所有客户的age（年龄）字段加1：</span></div><div class="line">Customer::updateAllCounters([<span class="string">'age'</span> =&gt; <span class="number">1</span>]);</div></pre></td></tr></table></figure><blockquote><p>须知：save() 方法会调用 insert() 和 update() 中的一个， 用哪个取决于当前 AR 对象是不是新对象（在函数内部，他会检查 yiidbActiveRecord::isNewRecord 的值）。</p><p>若 AR 对象是由 new 操作符 初始化出来的，save() 方法会在表里插入一条数据； 如果一个 AR 是由 find() 方法获取来的， 则 save() 会更新表里的对应行记录。</p></blockquote><h4 id="数据输入与有效性验证"><a href="#数据输入与有效性验证" class="headerlink" title="数据输入与有效性验证"></a>数据输入与有效性验证</h4><blockquote><p>由于AR继承自yiibaseModel，所以它同样也支持Model的数据输入、验证等特性。</p><p>例如，你可以声明一个rules方法用来覆盖掉yiibaseModel::rules()里的；你也可以给AR实例批量赋值；你也可以通过调用yiibaseModel::validate()执行数据验证。</p><p>当你调用 save()、insert()、update() 这三个方法时，会自动调用yiibaseModel::validate()方法。如果验证失败，数据将不会保存进数据库。</p><p>下面的例子演示了如何使用AR 获取/验证用户输入的数据并将他们保存进数据库：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新建一条记录</span></div><div class="line">$model = <span class="keyword">new</span> Customer;</div><div class="line"><span class="keyword">if</span> ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;save()) &#123;</div><div class="line">    <span class="comment">// 获取用户输入的数据，验证并保存</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更新主键为$id的AR</span></div><div class="line">$model = Customer::findOne($id);</div><div class="line"><span class="keyword">if</span> ($model === <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;save()) &#123;</div><div class="line">    <span class="comment">// 获取用户输入的数据，验证并保存</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="读取默认值"><a href="#读取默认值" class="headerlink" title="读取默认值"></a>读取默认值</h4><blockquote><p>你的表列也许定义了默认值。有时候，你可能需要在使用web表单的时候给AR预设一些值。</p><p>如果你需要这样做，可以在显示表单内容前通过调用loadDefaultValues()方法来实现：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">     $customer = <span class="keyword">new</span> Customer();</div><div class="line">     $customer-&gt;loadDefaultValues(); <span class="comment">// ... 渲染 $customer 的 HTML 表单 ...</span></div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">`</div></pre></td></tr></table></figure><p>AR的生命周期</p><blockquote><p>理解AR的生命周期对于你操作数据库非常重要。<br>生命周期通常都会有些典型的事件存在。<br>对于开发AR的behaviors来说非常有用。</p><p>当你实例化一个新的AR对象时，我们将获得如下的生命周期：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1. constructor</div><div class="line">2. yii\db\ActiveRecord::init(): 会触发一个 yii\db\ActiveRecord::EVENT_INIT 事件</div><div class="line">当你通过 yiidbActiveRecord::find() 方法查询数据时，每个AR实例都将有以下生命周期：</div><div class="line"></div><div class="line">1. constructor</div><div class="line">2. yii\db\ActiveRecord::init(): 会触发一个 yii\db\ActiveRecord::EVENT_INIT 事件</div><div class="line">3. yii\db\ActiveRecord::afterFind(): 会触发一个 yii\db\ActiveRecord::EVENT_AFTER_FIND 事件</div><div class="line">当通过 yiidbActiveRecord::save() 方法写入或者更新数据时, 我们将获得如下生命周期：</div><div class="line"></div><div class="line">1. yii\db\ActiveRecord::beforeValidate(): 会触发一个 yii\db\ActiveRecord::EVENT_BEFORE_VALIDATE 事件</div><div class="line">2. yii\db\ActiveRecord::afterValidate(): 会触发一个 yii\db\ActiveRecord::EVENT_AFTER_VALIDATE 事件</div><div class="line">3. yii\db\ActiveRecord::beforeSave(): 会触发一个 yii\db\ActiveRecord::EVENT_BEFORE_INSERT 或 yii\db\ActiveRecord::EVENT_BEFORE_UPDATE 事件</div><div class="line">4. 执行实际的数据写入或更新</div><div class="line">5. yii\db\ActiveRecord::afterSave(): 会触发一个 yii\db\ActiveRecord::EVENT_AFTER_INSERT 或 yii\db\ActiveRecord::EVENT_AFTER_UPDATE 事件</div><div class="line">最后，当调用 yiidbActiveRecord::delete() 删除数据时, 我们将获得如下生命周期：</div><div class="line"></div><div class="line">1. yii\db\ActiveRecord::beforeDelete(): 会触发一个 yii\db\ActiveRecord::EVENT_BEFORE_DELETE 事件</div><div class="line">2. 执行实际的数据删除</div><div class="line">3. yii\db\ActiveRecord::afterDelete(): 会触发一个 yii\db\ActiveRecord::EVENT_AFTER_DELETE 事件</div></pre></td></tr></table></figure><h4 id="查询关联的数据"><a href="#查询关联的数据" class="headerlink" title="查询关联的数据"></a>查询关联的数据</h4><blockquote><p>使用 AR 方法也可以查询数据表的关联数据（如，选出表A的数据可以拉出表B的关联数据）。有了 AR， 返回的关联数据连接就像连接关联主表的 AR 对象的属性一样。建立关联关系后，通过 $customer-&gt;orders 可以获取 一个 Order 对象的数组，该数组代表当前客户对象的订单集。定义关联关系使用一个可以返回 yiidbActiveQuery 对象的 getter 方法， yiidbActiveQuery对象有关联上下文的相关信息，因此可以只查询关联数据。例如：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrders</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="comment">// 客户和订单通过 Order.customer_id -&gt; id 关联建立一对多关系 </span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Order::className(), [<span class="string">'customer_id'</span> =&gt; <span class="string">'id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="comment">// 订单和客户通过 Customer.id -&gt; customer_id 关联建立一对一关系 </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCustomer</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Customer::className(), [<span class="string">'id'</span> =&gt; <span class="string">'customer_id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>以上使用了 yiidbActiveRecord::hasMany() 和 yiidbActiveRecord::hasOne() 方法。以上两例分别是关联数据多对一关系和一对一关系的建模范例。</p><p>如，一个客户有很多订单，一个订单只归属一个客户。两个方法都有两个参数并返回 yiidbActiveQuery 对象。$class：关联模型类名，它必须是一个完全合格的类名。$link: 两个表的关联列，应为键值对数组的形式。 数组的键是 $class 关联表的列名， 而数组值是关联类 $class 的列名。 </p><p>基于表外键定义关联关系是最佳方法。建立关联关系后，获取关联数据和获取组件属性一样简单， 执行以下相应getter方法即可：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取得客户的订单</span></div><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line">$orders = $customer-&gt;orders; <span class="comment">// $orders 是 Order 对象数组</span></div></pre></td></tr></table></figure><blockquote><p>以上代码实际执行了以下两条 SQL 语句：</p></blockquote><p>SELECT <em> FROM customer WHERE id=1;<br>SELECT </em> FROM order WHERE customer_id=1;<br>提示:再次用表达式 $customer-&gt;orders将不会执行第二次 SQL 查询， SQL 查询只在该表达式第一次使用时执行。</p><p>数据库访问只返回缓存在内部前一次取回的结果集，如果你想查询新的 关联数据，先要注销现有结果集：<br>unset($customer-&gt;orders);。<br>有时候需要在关联查询中传递参数，如不需要返回客户全部订单， 只需要返回购买金额超过设定值的大订单， 通过以下getter方法声明一个关联数据 bigOrders ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBigOrders</span><span class="params">($threshold = <span class="number">100</span>)</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Order::className(), [<span class="string">'customer_id'</span> =&gt; <span class="string">'id'</span>]) </div><div class="line">            -&gt;where(<span class="string">'subtotal &gt; :threshold'</span>, [<span class="string">':threshold'</span> =&gt; $threshold]) </div><div class="line">            -&gt;orderBy(<span class="string">'id'</span>); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>hasMany() 返回 yiidbActiveQuery 对象，该对象允许你通过 yiidbActiveQuery 方法定制查询。<br>如上声明后，执行 $customer-&gt;bigOrders 就返回 总额大于100的订单。使用以下代码更改设定值：</p><p>$orders = $customer-&gt;getBigOrders(200)-&gt;all();<br>注意：关联查询返回的是 yiidbActiveQuery 的实例，如果像特性（如类属性）那样连接关联数据， 返回的结果是关联查询的结果，即 yiidbActiveRecord 的实例， 或者是数组，或者是 null ，取决于关联关系的多样性。<br>如，$customer-&gt;getOrders() 返回ActiveQuery 实例，而 $customer-&gt;orders 返回Order 对象数组 （如果查询结果为空则返回空数组）。<br>中间关联表<br>有时，两个表通过中间表关联，定义这样的关联关系， 可以通过调用 yiidbActiveQuery::via() 方法或 yiidbActiveQuery::viaTable() 方法来定制 yiidbActiveQuery 对象 。</p><p>举例而言，如果 order 表和 item 表通过中间表 order_item 关联起来， 可以在 Order 类声明 items 关联关系取代中间表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getItems</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Item::className(), [<span class="string">'id'</span> =&gt; <span class="string">'item_id'</span>]) </div><div class="line">            -&gt;viaTable(<span class="string">'order_item'</span>, [<span class="string">'order_id'</span> =&gt; <span class="string">'id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个方法是相似的，除了 yiidbActiveQuery::via() 方法的第一个参数是使用 AR 类中定义的关联名。 以上方法取代了中间表，等价于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrderItems</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(OrderItem::className(), [<span class="string">'order_id'</span> =&gt; <span class="string">'id'</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getItems</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Item::className(), [<span class="string">'id'</span> =&gt; <span class="string">'item_id'</span>])</div><div class="line">            -&gt;via(<span class="string">'orderItems'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>延迟加载和即时加载（又称惰性加载与贪婪加载）<br>如前所述，当你第一次连接关联对象时， AR 将执行一个数据库查询 来检索请求数据并填充到关联对象的相应属性。如果再次连接相同的关联对象，不再执行任何查询语句，这种数据库查询的执行方法称为“延迟加载”。<br>如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SQL executed: SELECT * FROM customer WHERE id=1</span></div><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line"><span class="comment">// SQL executed: SELECT * FROM order WHERE customer_id=1</span></div><div class="line">$orders = $customer-&gt;orders;</div><div class="line"><span class="comment">// 没有 SQL 语句被执行</span></div><div class="line">$orders2 = $customer-&gt;orders; <span class="comment">//取回上次查询的缓存数据延迟加载非常实用，但是，在以下场景中使用延迟加载会遭遇性能</span></div></pre></td></tr></table></figure><p>问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SQL executed: SELECT * FROM customer LIMIT 100</span></div><div class="line">$customers = Customer::find()-&gt;limit(<span class="number">100</span>)-&gt;all();</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($customers <span class="keyword">as</span> $customer) &#123;</div><div class="line">    <span class="comment">// SQL executed: SELECT * FROM order WHERE customer_id=...</span></div><div class="line">    $orders = $customer-&gt;orders;</div><div class="line">    <span class="comment">// ...处理 $orders...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>假设数据库查出的客户超过100个，以上代码将执行多少条 SQL 语句？ 101 条！第一条 SQL 查询语句取回100个客户，然后， 每个客户要执行一条 SQL 查询语句以取回该客户的所有订单。</p><p>为解决以上性能问题，可以通过调用 yiidbActiveQuery::with() 方法使用即时加载解决。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SQL executed: SELECT * FROM customer LIMIT 100;</span></div><div class="line"><span class="comment">// SELECT * FROM orders WHERE customer_id IN (1,2,...)</span></div><div class="line">$customers = Customer::find()-&gt;limit(<span class="number">100</span>)</div><div class="line">    -&gt;with(<span class="string">'orders'</span>)-&gt;all();</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($customers <span class="keyword">as</span> $customer) &#123;</div><div class="line">    <span class="comment">// 没有 SQL 语句被执行</span></div><div class="line">    $orders = $customer-&gt;orders;</div><div class="line">    <span class="comment">// ...处理 $orders...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如你所见，同样的任务只需要两个 SQL 语句。</p><p>须知：通常，即时加载 N 个关联关系而通过 via() 或者 viaTable() 定义了 M 个关联关系， 将有 1+M+N 条 SQL 查询语句被执行：一个查询取回主表行数， 一个查询给每一个 (M) 中间表，一个查询给每个 (N) 关联表。<br>注意:当用即时加载定制 select() 时，确保连接 到关联模型的列都被包括了，否则，关联模型不会载入。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$orders = Order::find()</div><div class="line">    -&gt;select([<span class="string">'id'</span>, <span class="string">'amount'</span>])</div><div class="line">    -&gt;with(<span class="string">'customer'</span>)</div><div class="line">    -&gt;all();</div><div class="line">     </div><div class="line"><span class="comment">// $orders[0]-&gt;customer 总是空的，使用以下代码解决这个</span></div></pre></td></tr></table></figure><p>问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$orders = Order::find()</div><div class="line">    -&gt;select([<span class="string">'id'</span>, <span class="string">'amount'</span>, <span class="string">'customer_id'</span>])</div><div class="line">    -&gt;with(<span class="string">'customer'</span>)</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><p>有时候，你想自由的自定义关联查询，延迟加载和即时加载都可以实现，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line"><span class="comment">// 延迟加载: SELECT * FROM order WHERE customer_id=1 AND subtotal&gt;100</span></div><div class="line">$orders = $customer-&gt;getOrders()-&gt;where(<span class="string">'subtotal&gt;100'</span>)-&gt;all();</div><div class="line"></div><div class="line"><span class="comment">// 即时加载: SELECT * FROM customer LIMIT 100</span></div><div class="line"><span class="comment">//          SELECT * FROM order WHERE customer_id IN (1,2,...) AND subtotal&gt;100</span></div><div class="line">$customers = Customer::find()</div><div class="line">    -&gt;limit(<span class="number">100</span>)</div><div class="line">    -&gt;with([</div><div class="line">        <span class="string">'orders'</span> =&gt; <span class="function"><span class="keyword">function</span><span class="params">($query)</span> </span>&#123;</div><div class="line">            $query-&gt;andWhere(<span class="string">'subtotal&gt;100'</span>);</div><div class="line">        &#125;,</div><div class="line">    ])</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><p>逆关系<br>关联关系通常成对定义，如：Customer 可以有个名为 orders 关联项， 而 Order 也有个名为customer 的关联项：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    .... </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrders</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Order::className(), [<span class="string">'customer_id'</span> =&gt; <span class="string">'id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    .... </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCustomer</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Customer::className(), [<span class="string">'id'</span> =&gt; <span class="string">'customer_id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果我们执行以下查询，可以发现订单的 customer 和 找到这些订单的客户对象并不是同一个。</p><p>连接 customer-&gt;orders 将触发一条 SQL 语句 而连接一个订单的 customer 将触发另一条 SQL 语句。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SELECT * FROM customer WHERE id=1</span></div><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line"><span class="comment">// 输出 "不相同"</span></div><div class="line"><span class="comment">// SELECT * FROM order WHERE customer_id=1</span></div><div class="line"><span class="comment">// SELECT * FROM customer WHERE id=1</span></div><div class="line"><span class="keyword">if</span> ($customer-&gt;orders[<span class="number">0</span>]-&gt;customer === $customer) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'相同'</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'不相同'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为避免多余执行的后一条语句，我们可以为 customer或 orders 关联关系定义相反的关联关系，通过调用 yiidbActiveQuery::inverseOf() 方法可以实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    .... </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrders</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Order::className(), [<span class="string">'customer_id'</span> =&gt; <span class="string">'id'</span>])</div><div class="line">            -&gt;inverseOf(<span class="string">'customer'</span>); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们同样执行上面的查询，我们将得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SELECT * FROM customer WHERE id=1</span></div><div class="line">$customer = Customer::findOne(<span class="number">1</span>);</div><div class="line"><span class="comment">// 输出相同</span></div><div class="line"><span class="comment">// SELECT * FROM order WHERE customer_id=1</span></div><div class="line"><span class="keyword">if</span> ($customer-&gt;orders[<span class="number">0</span>]-&gt;customer === $customer) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'相同'</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'不相同'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上我们展示了如何在延迟加载中使用相对关联关系， 相对关系也可以用在即时加载中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SELECT * FROM customer</span></div><div class="line"><span class="comment">// SELECT * FROM order WHERE customer_id IN (1, 2, ...)</span></div><div class="line">$customers = Customer::find()-&gt;with(<span class="string">'orders'</span>)-&gt;all();</div><div class="line"><span class="comment">// 输出相同</span></div><div class="line"><span class="keyword">if</span> ($customers[<span class="number">0</span>]-&gt;orders[<span class="number">0</span>]-&gt;customer === $customers[<span class="number">0</span>]) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'相同'</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'不相同'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意:相对关系不能在包含中间表的关联关系中定义。<br>即是，如果你的关系是通过yii\db\ActiveQuery::via() 或 yii\db\ActiveQuery::viaTable()方法定义的， 就不能调用yii\db\ActiveQuery::inverseOf()方法了。<br>JOIN 类型关联查询<br>使用关系数据库时，普遍要做的是连接多个表并明确地运用各种 JOIN 查询。<br>JOIN SQL语句的查询条件和参数，使用 yiidbActiveQuery::joinWith() 可以重用已定义关系并调用 而不是使用 yiidbActiveQuery::join() 来实现目标。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查找所有订单并以客户 ID 和订单 ID 排序，并贪婪加载 "customer" 表</span></div><div class="line">$orders = Order::find()</div><div class="line">    -&gt;joinWith(<span class="string">'customer'</span>)</div><div class="line">    -&gt;orderBy(<span class="string">'customer.id, order.id'</span>)</div><div class="line">    -&gt;all();</div><div class="line"><span class="comment">// 查找包括书籍的所有订单，并以 `INNER JOIN` 的连接方式即时加载 "books" 表</span></div><div class="line">$orders = Order::find()</div><div class="line">    -&gt;innerJoinWith(<span class="string">'books'</span>)</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><p>以上，方法 yiidbActiveQuery::innerJoinWith() 是访问 INNER JOIN 类型的 yiidbActiveQuery::joinWith() 的快捷方式。</p><p>可以连接一个或多个关联关系，可以自由使用查询条件到关联查询， 也可以嵌套连接关联查询。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连接多重关系</span></div><div class="line"><span class="comment">// 找出24小时内注册客户包含书籍的订单</span></div><div class="line">$orders = Order::find()</div><div class="line">    -&gt;innerJoinWith([</div><div class="line">        <span class="string">'books'</span>,</div><div class="line">        <span class="string">'customer'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</div><div class="line">            $query-&gt;where(<span class="string">'customer.created_at &gt; '</span> . (time() - <span class="number">24</span> * <span class="number">3600</span>));</div><div class="line">        &#125;</div><div class="line">    ])</div><div class="line">    -&gt;all();</div><div class="line">    </div><div class="line"><span class="comment">// 连接嵌套关系：连接 books 表及其 author 列</span></div><div class="line">$orders = Order::find()</div><div class="line">    -&gt;joinWith(<span class="string">'books.author'</span>)</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><p>代码背后， Yii 先执行一条 JOIN SQL 语句把满足 JOIN SQL 语句查询条件的主要模型查出， 然后为每个关系执行一条查询语句， bing填充相应的关联记录。<br>yii\db\ActiveQuery::joinWith() 和 yii\db\ActiveQuery::with() 的区别是:<br>前者连接主模型类和关联模型类的数据表来检索主模型， 而后者只查询和检索主模型类。 </p><p>检索主模型由于这个区别，你可以应用只针对一条 JOIN SQL 语句起效的查询条件。 </p><p>如，通过关联模型的查询条件过滤主模型，如前例， 可以使用关联表的列来挑选主模型数据，<br>当使用 yii\db\ActiveQuery::joinWith() 方法时可以响应没有歧义的列名。</p><p>当连接关联关系时，关联关系默认使用即时加载。</p><p>你可以 通过传参数 $eagerLoading 来决定在指定关联查询中是否使用即时加载。</p><p>默认 yii\db\ActiveQuery::joinWith() 使用左连接来连接关联表。 </p><p>你也可以传 $joinType 参数来定制连接类型。 </p><p>你也可以使用 yii\db\ActiveQuery::innerJoinWith()。<br>以下是 INNER JOIN 的简短例子：</p><p>// 查找包括书籍的所有订单，但 “books” 表不使用即时加载<br>$orders = Order::find()<br>    -&gt;innerJoinWith(‘books’, false)<br>    -&gt;all();</p><p>// 等价于：<br>$orders = Order::find()<br>    -&gt;joinWith(‘books’, false, ‘INNER JOIN’)<br>    -&gt;all();<br>有时连接两个表时，需要在关联查询的 ON 部分指定额外条件。<br>这可以通过调用 yiidbActiveQuery::onCondition() 方法实现：</p><p>class User extends ActiveRecord{<br>    public function getBooks() {<br>        return $this-&gt;hasMany(Item::className(), [‘owner_id’ =&gt; ‘id’])<br>            -&gt;onCondition([‘category_id’ =&gt; 1]);<br>    }<br>}<br>在上面， yii\db\ActiveRecord::hasMany() 方法回传了一个 yii\db\ActiveQuery 对象， 当你用 yii\db\ActiveQuery::joinWith() 执行一条查询时，取决于正被调用的是哪个 yii\db\ActiveQuery::onCondition()， 返回 category_id 为 1 的 items。<br>当你用 yiidbActiveQuery::joinWith() 进行一次查询时，“on-condition”条件会被放置在相应查询语句的 ON 部分， 如：</p><p>// SELECT user.<em> FROM user LEFT JOIN item ON item.owner_id=user.id AND category_id=1<br>// SELECT </em> FROM item WHERE owner_id IN (…) AND category_id=1 </p><p>$users = User::find()-&gt;joinWith(‘books’)-&gt;all();<br>注意：如果通过 yiidbActiveQuery::with() 进行贪婪加载或使用惰性加载的话，则 on 条件会被放置在对应 SQL语句的 WHERE 部分。 因为，此时此处并没有发生 JOIN 查询。比如：</p><p>// SELECT * FROM user WHERE id=10<br>$user = User::findOne(10);</p><p>// SELECT * FROM item WHERE owner_id=10 AND category_id=1<br>$books = $user-&gt;books;<br>关联表操作<br>AR 提供了下面两个方法用来建立和解除两个关联对象之间的关系：</p><p>yiidbActiveRecord::link()<br>yiidbActiveRecord::unlink()<br>例如，给定一个customer和order对象，我们可以通过下面的代码使得customer对象拥有order对象：</p><p>$customer = Customer::findOne(1); $order = new Order(); $order-&gt;subtotal = 100; $customer-&gt;link(‘orders’, $order);<br>yiidbActiveRecord::link() 调用上述将设置 customer_id 的顺序是 $customer 的主键值，然后调用 yiidbActiveRecord::save() 要将顺序保存到数据库中。<br>作用域<br>当你调用yiidbActiveRecord::find() 或 yiidbActiveRecord::findBySql()方法时，将会返回一个yiidbActiveQuery实例。</p><p>之后，你可以调用其他查询方法，如 yiidbActiveQuery::where()，yiidbActiveQuery::orderBy(), 进一步的指定查询条件。</p><p>有时候你可能需要在不同的地方使用相同的查询方法。如果出现这种情况，你应该考虑定义所谓的作用域。</p><p>作用域是本质上要求一组的查询方法来修改查询对象的自定义查询类中定义的方法。</p><p>之后你就可以像使用普通方法一样使用作用域。只需两步即可定义一个作用域。</p><p>首先给你的model创建一个自定义的查询类，在此类中定义的所需的范围方法。</p><blockquote><p>例如，给Comment模型创建一个 CommentQuery类，然后在CommentQuery类中定义一个active()的方法为作用域，像下面的代码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>; <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveQuery</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentQuery</span> <span class="keyword">extends</span> <span class="title">ActiveQuery</span></span>&#123; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span><span class="params">($state = true)</span> </span>&#123; </div><div class="line">        <span class="keyword">$this</span>-&gt;andWhere([<span class="string">'active'</span> =&gt; $state]); </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>重点:类必须继承 yiidbActiveQuery (或者是其他的 ActiveQuery ，比如 yiimongodbActiveQuery)。必须是一个public类型的方法且必须返回 $this 实现链式操作。可以传入参数。检查 yiidbActiveQuery 对于修改查询条件是非常有用的方法。其次，覆盖yiidbActiveRecord::find() 方法使其返回自定义的查询对象而不是常规的yiidbActiveQuery。</p><p>对于上述例子，你需要编写如下代码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>; </div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="comment">/** * <span class="doctag">@inheritdoc</span> * <span class="doctag">@return</span> CommentQuery */</span> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommentQuery(get_called_class()); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就这样，现在你可以使用自定义的作用域方法了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$comments = Comment::find()</div><div class="line">    -&gt;active()</div><div class="line">    -&gt;all(); </div><div class="line"></div><div class="line">$inactiveComments = Comment::find()</div><div class="line">    -&gt;active(<span class="keyword">false</span>)</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><p>你也能在定义的关联里使用作用域方法，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActiveComments</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Comment::className(), [<span class="string">'post_id'</span> =&gt; <span class="string">'id'</span>])</div><div class="line">            -&gt;active(); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或者在执行关联查询的时候使用（on-the-fly 是啥？）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$posts = Post::find()</div><div class="line">    -&gt;with([ <span class="string">'comments'</span> =&gt; <span class="function"><span class="keyword">function</span><span class="params">($q)</span> </span>&#123; $q-&gt;active(); &#125; ])</div><div class="line">    -&gt;all();</div></pre></td></tr></table></figure><h4 id="默认作用域"><a href="#默认作用域" class="headerlink" title="默认作用域"></a>默认作用域</h4><p>如果你之前用过 Yii 1.1 就应该知道默认作用域的概念。</p><p>一个默认的作用域可以作用于所有查询。</p><p>你可以很容易的通过重写yiidbActiveRecord::find()方法来定义一个默认作用域，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">()</span></span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::find()</div><div class="line">        -&gt;where([<span class="string">'deleted'</span> =&gt; <span class="keyword">false</span>]); </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p> 注意，你之后所有的查询都不能用 yii\db\ActiveQuery::where()，但是可以用 yii\db\ActiveQuery::andWhere() 和 yii\db\ActiveQuery::orWhere()，他们不会覆盖掉默认作用域。</p><p>（译注：如果你要使用默认作用域，就不能在 xxx::find()后使用where()方法，你必须使用andXXX()或者orXXX()系的方法，否则默认作用域不会起效果，至于原因，打开where()方法的代码一看便知）</p></blockquote><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><blockquote><p>当执行几个相关联的数据库操作的时候</p></blockquote><p>TODO: FIXME: WIP, TBD, <a href="https://github.com/yiisoft/yii2/issues/226" target="_blank" rel="external">https://github.com/yiisoft/yii2/issues/226</a><br>, yii\db\ActiveRecord::afterSave(), yii\db\ActiveRecord::beforeDelete() and/or yii\db\ActiveRecord::afterDelete()<br>生命周期周期方法(life cycle methods 我觉得这句翻译成“模板方法”会不会更好点？)。</p><blockquote><p>开发者可以通过重写yiidbActiveRecord::save()方法然后在控制器里使用事务操作，严格地说是似乎不是一个好的做法 （召回”瘦控制器 / 肥模型”基本规则）。</p><p>这些方法在这里(如果你不明白自己实际在干什么，请不要使用他们)，Models：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feature</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="comment">// ... </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Product::className(), [<span class="string">'id'</span> =&gt; <span class="string">'product_id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123; </div><div class="line">    <span class="comment">// ... </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFeatures</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Feature::className(), [<span class="string">'product_id'</span> =&gt; <span class="string">'id'</span>]); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重写 yiidbActiveRecord::save() 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在控制器层使用事务：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>作为这些脆弱方法的替代，你应该使用原子操作方案特性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feature</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Product::className(), [<span class="string">'product_id'</span> =&gt; <span class="string">'id'</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            <span class="string">'userCreates'</span> =&gt; [</div><div class="line">                <span class="string">'attributes'</span> =&gt; [<span class="string">'name'</span>, <span class="string">'value'</span>],</div><div class="line">                <span class="string">'atomic'</span> =&gt; [<span class="keyword">self</span>::OP_INSERT],</div><div class="line">            ],</div><div class="line">        ];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFeatures</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Feature::className(), [<span class="string">'id'</span> =&gt; <span class="string">'product_id'</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            <span class="string">'userCreates'</span> =&gt; [</div><div class="line">                <span class="string">'attributes'</span> =&gt; [<span class="string">'title'</span>, <span class="string">'price'</span>],</div><div class="line">                <span class="string">'atomic'</span> =&gt; [<span class="keyword">self</span>::OP_INSERT],</div><div class="line">            ],</div><div class="line">        ];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterValidate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::afterValidate();</div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSave</span><span class="params">($insert)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::afterSave($insert);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getScenario() === <span class="string">'userCreates'</span>) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Controller里的代码将变得很简洁：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>控制器非常简洁：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> <span class="doctag">TODO:</span> WIP, TBD</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="被污染属性"><a href="#被污染属性" class="headerlink" title="被污染属性"></a>被污染属性</h4><blockquote><p>当你调用yiidbActiveRecord::save()用于保存活动记录(Active Record)实例时,只有被污染的属性才会被保存。</p><p>一个属性是否认定为被污染取决于它的值自从最后一次从数据库加载或者最近一次保存到数据库后到现在是否被修改过。注意:无论活动记录(Active Record)是否有被污染属性，数据验证始终会执行。</p><p>活动记录(Active Record)会自动维护一个污染数据列表。它的工作方式是通过维护一个较旧属性值版本，并且将它们与最新的进行比较。</p><p>你可以通过调用yiidbActiveRecord::getDirtyAttributes()来获取当前的污染属性。</p><p>你也可以调用yiidbActiveRecord::markAttributeDirty()来显示的标记一个属性为污染属性。</p><p>如果你对最近一次修改前的属性值感兴趣，你可以调用yiidbActiveRecord::getOldAttributes() 或 yiidbActiveRecord::getOldAttribute()。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Yii 在操作数据库方面提供了一个十分强大的类库来支撑整个框架业务的运转，这就是 Active Record （活动记录，以下简称AR）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://blog.upstady.com/categories/Yii2/"/>
    
    
      <category term="yii2" scheme="http://blog.upstady.com/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title>nginx-413</title>
    <link href="http://blog.upstady.com/2017/08/28/nginx-413/"/>
    <id>http://blog.upstady.com/2017/08/28/nginx-413/</id>
    <published>2017-08-28T07:40:52.000Z</published>
    <updated>2019-08-01T06:32:44.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[导读] Nginx出现的413 Request Entity Too Large错误,这个错误一般在上传文件的时候出现，打开nginx主配置文件nginx conf，找到http{}段，修改或者添加。</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">client_max_body_size 2m;</div></pre></td></tr></table></figure><blockquote><p>然后重启nginx，</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart nginx.service</div></pre></td></tr></table></figure><blockquote><p>要是以PHP运行的话，这个大小client_max_body_size要和php.ini中的如下值的最大值差不多或者稍大，这样就不会因为提交数据大小不一致出现错误。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">post_max_size = 2M</div><div class="line">upload_max_filesize = 2M</div></pre></td></tr></table></figure><blockquote><p>重启php-fpm</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart php-fpm.service</div></pre></td></tr></table></figure><blockquote><p>Ok,恢复正常</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;[导读] Nginx出现的413 Request Entity Too Large错误,这个错误一般在上传文件的时候出现，打开nginx主配置文件nginx conf，找到http{}段，修改或者添加。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://blog.upstady.com/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://blog.upstady.com/tags/nginx/"/>
    
      <category term="php" scheme="http://blog.upstady.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>git-project</title>
    <link href="http://blog.upstady.com/2017/08/14/git-project/"/>
    <id>http://blog.upstady.com/2017/08/14/git-project/</id>
    <published>2017-08-14T06:32:07.000Z</published>
    <updated>2019-08-01T06:32:44.844Z</updated>
    
    <content type="html"><![CDATA[<p>在命令行执行</p><h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"saviorlv"</span></div><div class="line">git config --global user.email <span class="string">"sunkunfeng211@163.com"</span></div></pre></td></tr></table></figure><h3 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@code.aliyun.com:saviorlv/yii2-admin.git</div><div class="line"><span class="built_in">cd</span> yii2-admin</div><div class="line">touch README.md</div><div class="line">git add README.md</div><div class="line">git commit -m <span class="string">"add README"</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure><h3 id="已经存在的文件夹或者git-仓库"><a href="#已经存在的文件夹或者git-仓库" class="headerlink" title="已经存在的文件夹或者git 仓库"></a>已经存在的文件夹或者git 仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> existing_folder</div><div class="line">git init</div><div class="line">git remote add origin git@code.aliyun.com:saviorlv/yii2-admin.git</div><div class="line">git add .</div><div class="line">git commit</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在命令行执行&lt;/p&gt;
&lt;h3 id=&quot;Git-全局设置&quot;&gt;&lt;a href=&quot;#Git-全局设置&quot; class=&quot;headerlink&quot; title=&quot;Git 全局设置&quot;&gt;&lt;/a&gt;Git 全局设置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Git" scheme="http://blog.upstady.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://blog.upstady.com/tags/git/"/>
    
      <category term="github" scheme="http://blog.upstady.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>centos-svn</title>
    <link href="http://blog.upstady.com/2017/08/07/centos-svn/"/>
    <id>http://blog.upstady.com/2017/08/07/centos-svn/</id>
    <published>2017-08-07T02:33:37.000Z</published>
    <updated>2019-08-01T06:32:44.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、搭建svn环境并创建仓库"><a href="#一、搭建svn环境并创建仓库" class="headerlink" title="一、搭建svn环境并创建仓库"></a>一、搭建svn环境并创建仓库</h3><blockquote><p>1、安装Subversion</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y subversion</div></pre></td></tr></table></figure><blockquote><p>2、检测是否安装成功(查看svn版本号)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve --version</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>3、创建版本库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//先建目录</div><div class="line">mkdir /var/svn</div><div class="line">sudo chmod -R 777 /var/svn</div><div class="line"><span class="built_in">cd</span> /var/svn</div><div class="line">//创建版本库</div><div class="line">svnadmin create /var/svn/project</div><div class="line"><span class="built_in">cd</span> project</div><div class="line">ls -a</div><div class="line">//自动生成的版本库文件</div><div class="line">conf  db  format  hooks  locks  README.txt</div></pre></td></tr></table></figure><blockquote><p>svn环境搭建成功。</p></blockquote><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><h4 id="进入conf目录（该svn版本库配置文件）"><a href="#进入conf目录（该svn版本库配置文件）" class="headerlink" title="进入conf目录（该svn版本库配置文件）"></a>进入conf目录（该svn版本库配置文件）</h4><blockquote><p>authz文件是权限控制文件</p><p>passwd是帐号密码文件</p><p>svnserve.conf SVN服务配置文件</p></blockquote><h4 id="设置帐号密码"><a href="#设置帐号密码" class="headerlink" title="设置帐号密码"></a>设置帐号密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim passwd</div></pre></td></tr></table></figure><blockquote><p>在[users]块中添加用户和密码，格式：帐号=密码，如junwei = junwei 完整内容参考下面：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">june = june</div><div class="line">junwei = junwei</div></pre></td></tr></table></figure><h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim authz</div></pre></td></tr></table></figure><blockquote><p>完整内容参考下面：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[aliases]</div><div class="line">[groups]</div><div class="line">admin=june  //创建一个组，并制定用户</div><div class="line">user=june,junwei</div><div class="line">[/]</div><div class="line">@admin=rw</div><div class="line">@user=rw</div></pre></td></tr></table></figure><h4 id="修改svnserve-conf文件"><a href="#修改svnserve-conf文件" class="headerlink" title="修改svnserve.conf文件"></a>修改svnserve.conf文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim svnserve.conf</div></pre></td></tr></table></figure><blockquote><p>完整内容参考下面：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[general]</div><div class="line">anon-access = <span class="built_in">read</span></div><div class="line">auth-access = write</div><div class="line">password-db = passwd</div><div class="line">authz-db = authz</div><div class="line">realm = /var/svn/project</div><div class="line"><span class="comment"># force-username-case = none</span></div><div class="line">[sasl]</div><div class="line"><span class="comment"># use-sasl = true</span></div><div class="line"><span class="comment"># min-encryption = 0</span></div><div class="line"><span class="comment"># max-encryption = 256</span></div></pre></td></tr></table></figure><h4 id="启动svn版本库"><a href="#启动svn版本库" class="headerlink" title="启动svn版本库　"></a>启动svn版本库　</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo svnserve -d -r /var/svn</div></pre></td></tr></table></figure><h3 id="三、实现svn更新自动同步到web目录："><a href="#三、实现svn更新自动同步到web目录：" class="headerlink" title="三、实现svn更新自动同步到web目录："></a>三、实现svn更新自动同步到web目录：</h3><blockquote><p>进入/var/svn/project/hooks下，建立post-commit文件：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/svn/project/hooks</div><div class="line">vim post-commit</div><div class="line"></div><div class="line">//在该文件里添加如下代码，保存</div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#设定环境变量，如果没有设定可能会出现update报错</span></div><div class="line"><span class="comment">#设定语言，根据系统语言设置，如果是GBK就设置为 LANG=zh_CN.GBK</span></div><div class="line"><span class="built_in">export</span> LANG=en_US.utf8</div><div class="line">SVN_PATH=/usr/bin/svn   //这里不用改</div><div class="line">WEB_PATH=/var/www/html  //web目录，如果你的不同，可以改</div><div class="line">//这里的用户随便一个就好</div><div class="line"><span class="variable">$SVN_PATH</span> update <span class="variable">$WEB_PATH</span> --username <span class="string">'junwei'</span> --password <span class="string">'junwei'</span> --no-auth-cache</div></pre></td></tr></table></figure><blockquote><p>保存退出。</p><p>给post-commit 执行权限：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 post-commit</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、搭建svn环境并创建仓库&quot;&gt;&lt;a href=&quot;#一、搭建svn环境并创建仓库&quot; class=&quot;headerlink&quot; title=&quot;一、搭建svn环境并创建仓库&quot;&gt;&lt;/a&gt;一、搭建svn环境并创建仓库&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、安装Subversion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install -y subversion&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;2、检测是否安装成功(查看svn版本号)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;svnserve --version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.upstady.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="http://blog.upstady.com/tags/centos/"/>
    
      <category term="svn" scheme="http://blog.upstady.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>centos7-Lnmp</title>
    <link href="http://blog.upstady.com/2017/08/04/centos7-Lnmp/"/>
    <id>http://blog.upstady.com/2017/08/04/centos7-Lnmp/</id>
    <published>2017-08-04T01:13:21.000Z</published>
    <updated>2019-08-01T06:32:44.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线上环境centos 7.2 x64</p></blockquote><h3 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update</div></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><blockquote><p>因为centos 不支持 yum安装 nginx，需要先添加 nginx 的yum 源。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>安装nginx</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><blockquote><p>更新MySQL地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh  http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-community-server</div></pre></td></tr></table></figure><blockquote><p>安装完毕后，在  /var/log/mysqld.log 文件中会自动生成一个随机的密码，我们需要先取得这个随机密码，以用于登录 MySQL 服务端</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">"password"</span> /var/<span class="built_in">log</span>/mysqld.log</div></pre></td></tr></table></figure><p>OR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql    <span class="comment">#直接登陆mysql</span></div></pre></td></tr></table></figure><blockquote><p>打印如下内容：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A temporary password is generated <span class="keyword">for</span> root@localhost: hilX0U!9i3_6</div></pre></td></tr></table></figure><blockquote><p>我们复制 root@localhost: 后面的随机字符串，这个字符串就是 MySQL 在安装完成后为我们随机生成的密码；</p><p>登录到 MySQL 服务端并更新用户 root 的密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -philX0U!9i3_6</div></pre></td></tr></table></figure><blockquote><p>打印出 MySQL 的版本即表明已登录；<br>设置用户 root 可以在任意 IP 下被访问：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to root@<span class="string">"%"</span> identified by <span class="string">"新密码"</span>;</div></pre></td></tr></table></figure><blockquote><p>刷新权限使之生效：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flush privileges;</div></pre></td></tr></table></figure><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><blockquote><p>安装php的yum源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</div><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div></pre></td></tr></table></figure><blockquote><p>安装php5.5</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64</div></pre></td></tr></table></figure><blockquote><p>安装php5.6</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64</div></pre></td></tr></table></figure><blockquote><p>安装php7</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64</div></pre></td></tr></table></figure><blockquote><p>安装php-fpm</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install php55w-fpm </div><div class="line">yum install php56w-fpm </div><div class="line">yum install php70w-fpm</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线上环境centos 7.2 x64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;更新yum源&quot;&gt;&lt;a href=&quot;#更新yum源&quot; class=&quot;headerlink&quot; title=&quot;更新yum源&quot;&gt;&lt;/a&gt;更新yum源&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;因为centos 不支持 yum安装 nginx，需要先添加 nginx 的yum 源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.upstady.com/categories/Linux/"/>
    
    
      <category term="aliyun" scheme="http://blog.upstady.com/tags/aliyun/"/>
    
      <category term="lnmp" scheme="http://blog.upstady.com/tags/lnmp/"/>
    
  </entry>
  
</feed>
